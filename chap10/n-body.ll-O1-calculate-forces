; ModuleID = 'n-body.c'
source_filename = "n-body.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.body_t = type { %struct.vec_t, %struct.vec_t, %struct.vec_t, double }
%struct.vec_t = type { double, double }

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @update_positions(i32 %0, %struct.body_t* nocapture %1, double %2) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %0, 0
  br i1 %4, label %5, label %8

5:                                                ; preds = %3
  %6 = fmul double %2, 5.000000e-01
  %7 = zext i32 %0 to i64
  br label %9

8:                                                ; preds = %9, %3
  ret void

9:                                                ; preds = %9, %5
  %10 = phi i64 [ 0, %5 ], [ %38, %9 ]
  %11 = getelementptr inbounds %struct.body_t, %struct.body_t* %1, i64 %10, i32 3
  %12 = load double, double* %11, align 8, !tbaa !2
  %13 = fdiv double %2, %12
  %14 = getelementptr inbounds %struct.body_t, %struct.body_t* %1, i64 %10, i32 2, i32 0
  %15 = load double, double* %14, align 8
  %16 = getelementptr inbounds %struct.body_t, %struct.body_t* %1, i64 %10, i32 2, i32 1
  %17 = load double, double* %16, align 8
  %18 = call fastcc { double, double } @vec_scale(double %15, double %17, double %13)
  %19 = extractvalue { double, double } %18, 0
  %20 = extractvalue { double, double } %18, 1
  %21 = getelementptr inbounds %struct.body_t, %struct.body_t* %1, i64 %10, i32 1, i32 0
  %22 = load double, double* %21, align 8
  %23 = getelementptr inbounds %struct.body_t, %struct.body_t* %1, i64 %10, i32 1, i32 1
  %24 = load double, double* %23, align 8
  %25 = call fastcc { double, double } @vec_add(double %22, double %24, double %19, double %20)
  %26 = extractvalue { double, double } %25, 0
  %27 = extractvalue { double, double } %25, 1
  %28 = call fastcc { double, double } @vec_scale(double %26, double %27, double %6)
  %29 = extractvalue { double, double } %28, 0
  %30 = extractvalue { double, double } %28, 1
  %31 = getelementptr inbounds %struct.body_t, %struct.body_t* %1, i64 %10, i32 0, i32 0
  %32 = load double, double* %31, align 8
  %33 = getelementptr inbounds %struct.body_t, %struct.body_t* %1, i64 %10, i32 0, i32 1
  %34 = load double, double* %33, align 8
  %35 = call fastcc { double, double } @vec_add(double %32, double %34, double %29, double %30)
  %36 = extractvalue { double, double } %35, 0
  %37 = extractvalue { double, double } %35, 1
  store double %36, double* %31, align 8, !tbaa.struct !8
  store double %37, double* %33, align 8, !tbaa.struct !8
  store double %19, double* %21, align 8, !tbaa.struct !8
  store double %20, double* %23, align 8, !tbaa.struct !8
  %38 = add nuw nsw i64 %10, 1
  %39 = icmp eq i64 %38, %7
  br i1 %39, label %8, label %9, !llvm.loop !10
}

; Function Attrs: norecurse nounwind readnone uwtable
define internal fastcc { double, double } @vec_scale(double %0, double %1, double %2) unnamed_addr #1 {
  %4 = fmul double %0, %2
  %5 = fmul double %1, %2
  %6 = insertvalue { double, double } undef, double %4, 0
  %7 = insertvalue { double, double } %6, double %5, 1
  ret { double, double } %7
}

; Function Attrs: norecurse nounwind readnone uwtable
define internal fastcc { double, double } @vec_add(double %0, double %1, double %2, double %3) unnamed_addr #1 {
  %5 = fadd double %0, %2
  %6 = fadd double %1, %3
  %7 = insertvalue { double, double } undef, double %5, 0
  %8 = insertvalue { double, double } %7, double %6, 1
  ret { double, double } %8
}

; Function Attrs: nounwind uwtable
define dso_local void @calculate_forces(i32 %0, %struct.body_t* %1) local_unnamed_addr #2 {
  %3 = icmp sgt i32 %0, 0
  br i1 %3, label %4, label %10

4:                                                ; preds = %2
  %5 = zext i32 %0 to i64
  br label %6

6:                                                ; preds = %11, %4
  %7 = phi i64 [ 0, %4 ], [ %12, %11 ]
  %8 = getelementptr inbounds %struct.body_t, %struct.body_t* %1, i64 %7
  %9 = zext i32 %0 to i64
  br label %14

10:                                               ; preds = %11, %2
  ret void

11:                                               ; preds = %22
  %12 = add nuw nsw i64 %7, 1
  %13 = icmp eq i64 %12, %5
  br i1 %13, label %10, label %6, !llvm.loop !12

14:                                               ; preds = %22, %6
  %15 = phi i64 [ 0, %6 ], [ %23, %22 ]
  %16 = icmp eq i64 %7, %15
  br i1 %16, label %22, label %17

17:                                               ; preds = %14
  %18 = getelementptr inbounds %struct.body_t, %struct.body_t* %1, i64 %15
  %19 = call { double, double } @calculate_force(%struct.body_t* %8, %struct.body_t* %18) #4
  %20 = extractvalue { double, double } %19, 0
  %21 = extractvalue { double, double } %19, 1
  call void @add_force(%struct.body_t* %8, double %20, double %21) #4
  br label %22

22:                                               ; preds = %14, %17
  %23 = add nuw nsw i64 %15, 1
  %24 = icmp eq i64 %23, %9
  br i1 %24, label %11, label %14, !llvm.loop !13
}

declare dso_local void @add_force(%struct.body_t*, double, double) local_unnamed_addr #3

declare dso_local { double, double } @calculate_force(%struct.body_t*, %struct.body_t*) local_unnamed_addr #3

; Function Attrs: nounwind uwtable
define dso_local void @simulate(%struct.body_t* %0, i32 %1, i32 %2, i32 %3) local_unnamed_addr #2 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %8

6:                                                ; preds = %4
  %7 = sitofp i32 %3 to double
  br label %9

8:                                                ; preds = %9, %4
  ret void

9:                                                ; preds = %9, %6
  %10 = phi i32 [ 0, %6 ], [ %11, %9 ]
  call void @calculate_forces(i32 %1, %struct.body_t* %0)
  call void @update_positions(i32 %1, %struct.body_t* %0, double %7)
  %11 = add nuw nsw i32 %10, 1
  %12 = icmp eq i32 %11, %2
  br i1 %12, label %8, label %9, !llvm.loop !14
}

attributes #0 = { nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 11.0.0-2~ubuntu20.04.1"}
!2 = !{!3, !5, i64 48}
!3 = !{!"body_t", !4, i64 0, !4, i64 16, !4, i64 32, !5, i64 48}
!4 = !{!"vec_t", !5, i64 0, !5, i64 8}
!5 = !{!"double", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{i64 0, i64 8, !9, i64 8, i64 8, !9}
!9 = !{!5, !5, i64 0}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !11}
!13 = distinct !{!13, !11}
!14 = distinct !{!14, !11}
